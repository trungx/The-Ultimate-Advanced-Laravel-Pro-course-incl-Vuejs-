1
00:00:00,240 --> 00:00:04,840
Let's to go out middleware and the extensive power it gives us for customization.

2
00:00:04,890 --> 00:00:09,570
Now if you're not used to me the way in love with me the web is simply a really easy way for us to hook

3
00:00:09,570 --> 00:00:11,140
into the request lifecycle.

4
00:00:11,190 --> 00:00:16,230
For example if we have an ongoing request and the user is maybe trained to assess a particular entity

5
00:00:16,410 --> 00:00:22,440
we could check if the user has a meter to assess that and see during the request lifecycle and maybe

6
00:00:22,440 --> 00:00:27,180
do something and let the user assess it or simply block the users access.

7
00:00:27,180 --> 00:00:35,210
Now let's get into a kernel that ph B which is in our HP directory or namespace and a lot of arrays

8
00:00:35,290 --> 00:00:39,170
right here that give us an extensive power of customization.

9
00:00:39,190 --> 00:00:41,280
We're going to go to each and every one of this.

10
00:00:41,320 --> 00:00:45,460
So like we said middleware are going to run during the requests lifecycle.

11
00:00:45,460 --> 00:00:51,800
For example Visby right here specifies only the way that we're going to run on every single request.

12
00:00:51,880 --> 00:00:57,010
Lavoe checks on maintenance with a check from it and unsmooth middleware and you can also define your

13
00:00:57,010 --> 00:00:58,310
own custom middleware.

14
00:00:58,330 --> 00:01:04,510
For example if you want to check if the person making the request is of a particular email to give him

15
00:01:04,630 --> 00:01:08,640
different responsibilities or different permissions then you can do that.

16
00:01:08,680 --> 00:01:13,720
You can do whatever you want with middleware OK if you want to check if the request is coming from a

17
00:01:13,720 --> 00:01:17,820
particular IP or particular Kountry middleware is where you can go to.

18
00:01:17,910 --> 00:01:18,350
OK.

19
00:01:18,370 --> 00:01:20,610
So first of all we have this.

20
00:01:20,860 --> 00:01:26,650
And if you have a particular piece of code that you want to run on every single request this is where

21
00:01:26,650 --> 00:01:30,760
you're going to be just like me the way this is where you're going to put your middleware and loveall

22
00:01:30,750 --> 00:01:33,850
is going to run this me to wear on every single request.

23
00:01:33,850 --> 00:01:40,150
If you have middleware that you want to want only on those set of routes on the set of requests therefore

24
00:01:40,150 --> 00:01:44,590
you just need to create a custom middleware group and then you place the group right here and then you

25
00:01:44,610 --> 00:01:47,650
register your middleware in it's we're going to talk about that in a moment.

26
00:01:47,800 --> 00:01:53,770
Now if you want me the way that you want you want only on particular specified routes then what middleware

27
00:01:53,770 --> 00:01:55,340
is where you have to go to.

28
00:01:55,450 --> 00:01:58,590
OK now we're going to go through each and every one of these areas.

29
00:01:58,660 --> 00:02:03,490
And for us to actually do that effectively Let's go ahead and create our own custom middleware by 1

30
00:02:03,490 --> 00:02:03,910
mph.

31
00:02:03,910 --> 00:02:09,140
We recently made aware and we'll give the name of AMI to wear to the test.

32
00:02:09,400 --> 00:02:09,730
Okay.

33
00:02:09,730 --> 00:02:15,230
You can be whatever you want and automatically label is going to save me to wear in our app.

34
00:02:15,280 --> 00:02:17,480
It's to be made aware directory.

35
00:02:17,560 --> 00:02:18,250
There we go.

36
00:02:18,280 --> 00:02:23,720
Now every middleware is just going to be a class with a handle method and that's it.

37
00:02:23,830 --> 00:02:24,370
OK.

38
00:02:24,460 --> 00:02:29,410
And all you need to do is define your code right here and then make sure at the end you return next

39
00:02:29,560 --> 00:02:34,950
which is some sort of way of telling the request lifecycle to continue because the is going to kill

40
00:02:34,960 --> 00:02:39,120
this code and you can either stop the request or let it continue.

41
00:02:39,150 --> 00:02:42,090
OK but you don't want to leave the request lifecycle hanging.

42
00:02:42,220 --> 00:02:43,860
So what are we going to be doing.

43
00:02:43,990 --> 00:02:48,190
We are going to really start this middleware to run on every single request and I'm going to show you

44
00:02:48,190 --> 00:02:49,000
how that works.

45
00:02:49,180 --> 00:02:54,000
And for us to know that it's actually running we are going to hijack the request.

46
00:02:54,100 --> 00:02:57,120
And at this very point we are going to set a session.

47
00:02:57,260 --> 00:02:57,670
OK.

48
00:02:57,700 --> 00:03:04,600
So session flash and we are going to be flashing a test key and we're going to see the first key from

49
00:03:05,020 --> 00:03:07,270
decimeter where it's going to be the value.

50
00:03:07,400 --> 00:03:12,700
OK I'll save that and I'm going to register this me the way and like we said in our commodity the HP

51
00:03:12,850 --> 00:03:19,660
if you want to wear one on every single request you have to put it in this middleware array.

52
00:03:19,690 --> 00:03:25,700
So let's go ahead and we just right there streamed the app that's to be made aware SEST class.

53
00:03:25,780 --> 00:03:27,090
The one we just created.

54
00:03:27,200 --> 00:03:27,620
OK.

55
00:03:27,640 --> 00:03:30,100
So lovely squinch one day on every request.

56
00:03:30,100 --> 00:03:34,930
Now how do we know Lavell has actually done that piece of code and assertion has been flushed.

57
00:03:34,960 --> 00:03:40,570
Let's have a watch or whether picture me and right here we have a request right and we're going to simply

58
00:03:40,630 --> 00:03:45,660
do a little died down right here of a session value to see if we have that value.

59
00:03:45,700 --> 00:03:49,160
So session get test OK.

60
00:03:49,180 --> 00:03:55,210
So if that was actually wrong when we bring this request to the home page that session should be flashed

61
00:03:55,260 --> 00:03:57,680
as a test and we should actually see it there.

62
00:03:57,760 --> 00:03:58,210
OK.

63
00:03:58,210 --> 00:04:00,080
So let's go ahead and make this request.

64
00:04:00,100 --> 00:04:00,760
There we go.

65
00:04:00,760 --> 00:04:05,520
We have this desk from the test middleware which means that middleware was actually one.

66
00:04:05,530 --> 00:04:12,430
Let's go to the next level we have this group or this way for me the way that I went to run on every

67
00:04:12,430 --> 00:04:13,450
single request.

68
00:04:13,450 --> 00:04:14,570
Now let's go to the next.

69
00:04:14,590 --> 00:04:17,270
It talks about Raud middleware groups.

70
00:04:17,350 --> 00:04:17,690
OK.

71
00:04:17,720 --> 00:04:24,940
And think of this as simply a way to run me the way on a particular set of routes or requests.

72
00:04:25,000 --> 00:04:29,980
For example we have two groups that can by default with Lovelle a web group and an API group.

73
00:04:30,040 --> 00:04:30,560
OK.

74
00:04:30,700 --> 00:04:36,580
And like we see right here the web group is going to actually be all the requests or routes that we

75
00:04:36,580 --> 00:04:38,920
match in our web.

76
00:04:39,010 --> 00:04:43,500
So any vote that you register in your web the Peachtree is really going to be under this group.

77
00:04:43,570 --> 00:04:44,070
Right.

78
00:04:44,170 --> 00:04:48,240
And we see in this group we have to wear a check for the CSR with token.

79
00:04:48,310 --> 00:04:51,740
We have me the way that study session and all that for the API.

80
00:04:51,910 --> 00:04:57,710
We don't have all of these middleware but we have the weather Tromso and registar bindings.

81
00:04:57,730 --> 00:05:03,140
Now when you see a string like this rather than a class it means Lovelle is referencing the middleware

82
00:05:03,150 --> 00:05:07,550
register registered in another group which is bindings group and the will grow.

83
00:05:07,580 --> 00:05:08,050
OK.

84
00:05:08,140 --> 00:05:13,120
So for example if we want that all the middleware on the web to be registered in API then we're simply

85
00:05:13,120 --> 00:05:15,400
going to add the web stream right here.

86
00:05:15,550 --> 00:05:17,080
OK but we're not going to be doing that.

87
00:05:17,170 --> 00:05:22,840
So we are going to be testing out the API group and whether we're going to be doing is removing this

88
00:05:22,840 --> 00:05:28,090
registration that we registered under the global me to where I will put it on the API group.

89
00:05:28,090 --> 00:05:33,630
It means every single request from this group is going to have this middleware run right and it also

90
00:05:33,630 --> 00:05:37,230
means every single request from this group is not going to have them in the way run.

91
00:05:37,230 --> 00:05:39,480
So let's go ahead and try to make this request.

92
00:05:39,480 --> 00:05:39,930
There we go.

93
00:05:39,930 --> 00:05:40,610
We have not.

94
00:05:40,620 --> 00:05:41,160
Why.

95
00:05:41,160 --> 00:05:44,490
Because our middle window is when you start on the API.

96
00:05:44,580 --> 00:05:48,960
But we are trying to dumb the session on the vaults that is when you start on the web.

97
00:05:49,080 --> 00:05:51,560
So let's head over to API that ph.

98
00:05:51,910 --> 00:05:58,110
And then more about the different wildfires and a little bit and we're going to start a new route and

99
00:05:58,110 --> 00:06:04,530
it's going to be a get and we'll simply visit the homeworld for this group pass in a close up.

100
00:06:04,800 --> 00:06:07,120
And here again to date them something.

101
00:06:07,120 --> 00:06:11,510
Now if you try to diatom a session value right here we wouldn't be able to do that right.

102
00:06:11,520 --> 00:06:18,780
Because remember you know it cannot be this API group does not have access to the session only the web

103
00:06:18,810 --> 00:06:19,680
has access.

104
00:06:19,740 --> 00:06:25,200
Therefore what head of what you are what test middleware and modified a little what we want to do is

105
00:06:25,740 --> 00:06:30,020
rather than setting a session that's just died on the stream right here.

106
00:06:30,300 --> 00:06:35,270
OK so if we make a request and this me the ways are truly one of the requests we intercepted and the

107
00:06:35,400 --> 00:06:37,080
die and would see this key.

108
00:06:37,170 --> 00:06:37,780
OK.

109
00:06:37,890 --> 00:06:44,100
Therefore our API that BHB route is when you start we don't even need to have anything right here because

110
00:06:44,190 --> 00:06:46,550
this closure won't even be executed.

111
00:06:46,620 --> 00:06:51,900
So let's try to reset that route and remember everything in the API that Peachtree is wrapped with the

112
00:06:51,900 --> 00:06:53,000
API prefix.

113
00:06:53,070 --> 00:06:57,220
OK so in the Wizard of Oz we see test key form test middleware.

114
00:06:57,330 --> 00:07:02,180
Let's go ahead and fight a little LESKIE from test middleware API routes.

115
00:07:02,240 --> 00:07:04,860
Save one that request again.

116
00:07:04,860 --> 00:07:10,700
There we go test key from test me to where I was because we have this diagram right here.

117
00:07:10,820 --> 00:07:11,230
OK.

118
00:07:11,250 --> 00:07:12,790
So that works as expected.

119
00:07:12,930 --> 00:07:17,520
Now I'm going to pull this out and let's talk about our last group are we right here.

120
00:07:17,610 --> 00:07:22,350
And this is the middleware that we want to run only on particular routes.

121
00:07:22,350 --> 00:07:22,870
OK.

122
00:07:22,950 --> 00:07:28,920
So if we want to actually specify a middleware just for one route or two Truthout then you have to register

123
00:07:29,130 --> 00:07:30,940
our custom made aware right.

124
00:07:31,080 --> 00:07:35,040
So I'm going to pull out our cost on the way here and I'm going to register it.

125
00:07:35,070 --> 00:07:38,730
And in this case you notice you have to give a name to the middleware.

126
00:07:38,790 --> 00:07:42,970
OK because you need to identify this middleware from your outfight.

127
00:07:43,020 --> 00:07:48,180
OK so how do we use this me the way in this case I'll head over to my web that me and we can use this

128
00:07:48,180 --> 00:07:52,100
one for any our go because we're going to specifying it on a particular route.

129
00:07:52,200 --> 00:07:57,230
So I'm going to move this and we'll keep the default return head of to my test middleware.

130
00:07:57,270 --> 00:08:03,660
Modify it a little and it's going to be specific routes that is going to be day dawns and how do we

131
00:08:03,660 --> 00:08:07,380
apply this me to where let's say we wanted to apply this to where to this route.

132
00:08:07,440 --> 00:08:10,800
We just need to attach this me to where metho at right here.

133
00:08:10,890 --> 00:08:15,510
And lovely so dramatically going to change that and we're giving the name of the middleware in this

134
00:08:15,510 --> 00:08:16,610
case test.

135
00:08:16,650 --> 00:08:17,040
OK.

136
00:08:17,040 --> 00:08:21,430
So any time we visit that route we should see that middle way in action.

137
00:08:21,600 --> 00:08:25,190
And there we go just as easy as that that may be the way it is running on that route.

138
00:08:25,230 --> 00:08:25,730
OK.

139
00:08:25,800 --> 00:08:28,210
So if we pull that out make that request again.

140
00:08:28,290 --> 00:08:33,920
We have the home page but if we let that in make the request sure enough we have what they dump.

141
00:08:33,990 --> 00:08:34,490
OK.

142
00:08:34,590 --> 00:08:38,630
So that's how we can actually customize application with middleware.

143
00:08:38,790 --> 00:08:45,150
Just to recap if you want a middleware that is going to run on every single request then it's going

144
00:08:45,150 --> 00:08:46,390
to be stuck in here.

145
00:08:46,440 --> 00:08:51,960
But if you want a the where that is going to run on a particular route group then you need to put it

146
00:08:52,230 --> 00:08:54,930
on the other for that route go up.

147
00:08:55,020 --> 00:08:55,600
OK.

148
00:08:55,710 --> 00:09:00,590
And if you want a middle way that you can attach on particular routes only then this is where you are

149
00:09:00,590 --> 00:09:02,510
going to register your middleware.

150
00:09:02,550 --> 00:09:05,160
That's what about having a cost on route groups.

151
00:09:05,190 --> 00:09:10,250
I want us to really take a deep dive into the sun what this world groups are and how they are truly

152
00:09:10,250 --> 00:09:13,950
phone in the web PH BE and API Ph be.

153
00:09:13,950 --> 00:09:17,880
So I'm going to hit pause on this video right here and in the very next video we're going to talk about

154
00:09:17,880 --> 00:09:19,230
that extensively.

