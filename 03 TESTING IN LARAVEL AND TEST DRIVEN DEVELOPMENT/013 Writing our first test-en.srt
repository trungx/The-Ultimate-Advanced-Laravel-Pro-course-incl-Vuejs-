1
00:00:00,210 --> 00:00:02,120
Let's make our first test and run it.

2
00:00:02,190 --> 00:00:07,190
Now this brings me to the point where I have to tell you about test driven development not the normal

3
00:00:07,200 --> 00:00:12,690
way for us to write the code is to write code then write a test and make sure the test passes and then

4
00:00:12,690 --> 00:00:14,140
we push the production right.

5
00:00:14,300 --> 00:00:18,930
We are going to be using a different approach which is test driven development meaning rather than words

6
00:00:18,930 --> 00:00:22,730
and code and writing tests we're going to write test then we write code.

7
00:00:22,740 --> 00:00:30,540
Now there is one big advantage of of involvement out of so many advantages and that advantage is that

8
00:00:30,540 --> 00:00:33,800
it gives us some time to think about our code.

9
00:00:33,930 --> 00:00:36,040
How do we want our applications work.

10
00:00:36,150 --> 00:00:41,290
How do we want them with features to work and how do we want our code to be organized.

11
00:00:41,310 --> 00:00:41,660
Right.

12
00:00:41,760 --> 00:00:45,590
That is one of the biggest advantages test humans are in is going to give to you.

13
00:00:45,600 --> 00:00:51,180
Sometimes they sit in front of computer and for a very long time I cannot write any single line of code.

14
00:00:51,180 --> 00:00:56,700
Why because I'm thinking about how to write my next test if I don't think about how to write my test

15
00:00:56,760 --> 00:01:01,110
I'm not writing in a line of code and that's just one of the greatest advantages that Trumans of them

16
00:01:01,110 --> 00:01:02,180
and is going to give to you.

17
00:01:02,280 --> 00:01:06,270
There are a lot of advantages but we're going to be learning them as we go along do we.

18
00:01:06,270 --> 00:01:09,430
So how do we use this idea of test driven development.

19
00:01:09,450 --> 00:01:10,740
Let's go ahead and check it out.

20
00:01:10,860 --> 00:01:16,210
So in our Web page we found we have this end point which is the home page and it returns this view.

21
00:01:16,380 --> 00:01:19,110
Let's just see what clann wants on about page.

22
00:01:19,110 --> 00:01:23,270
And when you visit about page you just see a big about page on The View.

23
00:01:23,280 --> 00:01:25,000
Let's go ahead and create a test.

24
00:01:25,020 --> 00:01:26,300
And this is going to be a feature.

25
00:01:26,330 --> 00:01:32,250
That's right because we don't care about how it's connected to control us or if it's using closures

26
00:01:32,280 --> 00:01:39,330
but we just want an about Beach and that a boat should display about me on The View.

27
00:01:39,330 --> 00:01:40,950
So let's go ahead and create a test.

28
00:01:41,040 --> 00:01:44,730
And obviously Lavoe as awesome as it is has to help with this.

29
00:01:44,790 --> 00:01:50,070
So ph be our son make test and this test is going to be about Bache test.

30
00:01:50,070 --> 00:01:52,160
Now there are two options we have here.

31
00:01:52,290 --> 00:01:57,080
We are creating a unique test or we are creating a feature test kitchen of each It's us with Lavo.

32
00:01:57,090 --> 00:02:02,070
This is the common but if you're in a unit you just need to pass in unit right here and that's going

33
00:02:02,070 --> 00:02:04,260
to created in the unit directory.

34
00:02:04,260 --> 00:02:06,050
So not interested in a future test.

35
00:02:06,060 --> 00:02:10,990
Let's go ahead and one that the test that's been created for us about Bache dust.

36
00:02:11,070 --> 00:02:15,080
Now I'm going to clean up this boiler plate and we're going to take care of it ourselves.

37
00:02:15,090 --> 00:02:17,010
How would our test look.

38
00:02:17,010 --> 00:02:23,730
First thing about writing test that a lot a lot of ways of writing your test for PH be to recognize

39
00:02:23,730 --> 00:02:27,730
that there are tests and I try them but we're going to go with the simplest.

40
00:02:27,760 --> 00:02:30,480
So public function and it's the way lover does it.

41
00:02:30,480 --> 00:02:35,880
So if you check in DUMBO test it starts every test with the test keyword and then it gives a description

42
00:02:35,880 --> 00:02:36,930
of what the test does.

43
00:02:36,960 --> 00:02:38,960
And then it does this thing within.

44
00:02:38,970 --> 00:02:40,000
So let's go ahead.

45
00:02:40,060 --> 00:02:43,050
What about Beach test and do that public function.

46
00:02:43,050 --> 00:02:44,900
And we're just stuck with test.

47
00:02:44,910 --> 00:02:48,200
And then we can write a description about that.

48
00:02:48,390 --> 00:02:50,860
So tests can view about Ph.

49
00:02:50,880 --> 00:02:55,080
Now we have this set up if we want it it's not going to actually do anything.

50
00:02:55,080 --> 00:02:58,690
So we need to do something assert something and then run a test right.

51
00:02:58,800 --> 00:03:00,620
So how do we want this to work.

52
00:03:00,640 --> 00:03:03,930
Basically we want a user to visit a Ph.

53
00:03:03,990 --> 00:03:05,220
So what's the response.

54
00:03:05,220 --> 00:03:12,120
Because this and you visit a page by making a get request right and we want you to visit the about page

55
00:03:12,270 --> 00:03:14,330
and Wendy's the about Ph.

56
00:03:14,350 --> 00:03:17,860
We're going to see response as search stutterers 200.

57
00:03:17,880 --> 00:03:18,340
Right.

58
00:03:18,360 --> 00:03:23,500
So we want to make sure that when you use of this is this route catalyses the status of 200.

59
00:03:23,550 --> 00:03:23,910
Right.

60
00:03:24,000 --> 00:03:27,360
So it means he was successful and he saw a reasonable ph.

61
00:03:27,540 --> 00:03:33,820
So we can also run another assertion and the assertion we're going to be in is respon assert.

62
00:03:33,880 --> 00:03:35,530
See about me.

63
00:03:35,580 --> 00:03:41,090
So when they use this route we are making sure that he's successful and we also making sure that he

64
00:03:41,090 --> 00:03:43,950
actually sees this piece of text which is about me.

65
00:03:43,950 --> 00:03:46,070
So this is all about testing.

66
00:03:46,110 --> 00:03:48,300
This is how we want applications to work.

67
00:03:48,300 --> 00:03:51,930
We haven't written any code but then we have the basic skeleton.

68
00:03:51,930 --> 00:03:56,240
So in order for us to run the stairs I'm just going to delete this basic test.

69
00:03:56,240 --> 00:03:57,190
Call me labo.

70
00:03:57,210 --> 00:04:00,630
Because we don't need them and we're going to focus on this one.

71
00:04:00,810 --> 00:04:03,600
So let's head over to our army now and run that test.

72
00:04:03,780 --> 00:04:07,290
And you're going to see this a lot when you're doing test driven development.

73
00:04:07,290 --> 00:04:08,380
You write a test.

74
00:04:08,460 --> 00:04:09,950
You know it's going to fail.

75
00:04:10,020 --> 00:04:15,570
But then you still run it from the errors that you have to really make those errors go away and continue

76
00:04:15,570 --> 00:04:18,040
doing this till the test passes.

77
00:04:18,060 --> 00:04:21,020
Then at that point you refactor your code to make it better.

78
00:04:21,180 --> 00:04:21,720
OK.

79
00:04:21,720 --> 00:04:23,870
So let's run this and see what we get.

80
00:04:23,880 --> 00:04:28,150
And one phileo expected status of twanged but received a 4.

81
00:04:28,170 --> 00:04:29,040
0 4.

82
00:04:29,160 --> 00:04:35,850
And we know a 4 or 4 is not found exception meaning we didn't actually see the about rods.

83
00:04:35,970 --> 00:04:42,610
Right now I'm going to tweak something a little and that's in my OP exceptions hand-lettered ph B.

84
00:04:42,720 --> 00:04:46,990
And what this class does is actually handles the exceptions in lover.

85
00:04:47,010 --> 00:04:48,850
Let's look at this random thought.

86
00:04:48,870 --> 00:04:55,860
So when there's an exception to an AGP response and that's because for example if you try to visit the

87
00:04:55,860 --> 00:05:02,560
about routes now in our Vasa we don't receive an exception we are actually receiving an S2P response

88
00:05:02,560 --> 00:05:06,490
which is a page telling us to everyone that we're strong right now.

89
00:05:06,550 --> 00:05:12,490
What level does is when an exception is when in the application of that exception and then it tries

90
00:05:12,490 --> 00:05:15,720
to render it into a page that is beautiful so we can see it.

91
00:05:15,880 --> 00:05:20,980
So what we're going to do here before I go refunds and S2P ph.

92
00:05:20,980 --> 00:05:23,640
We're going to fill that exception again.

93
00:05:23,740 --> 00:05:24,060
Right.

94
00:05:24,100 --> 00:05:29,640
So we catch the exception that has been done before it's looking such that we'll be able to see the

95
00:05:29,640 --> 00:05:31,110
exception itself.

96
00:05:31,210 --> 00:05:36,910
And this is going to actually cause a hassle because if we refresh now the page is not working because

97
00:05:36,910 --> 00:05:41,280
that exceptionally strong and the Vaso doesn't know what to do with that exception.

98
00:05:41,410 --> 00:05:46,420
Now even though the boss doesn't know what to do with it it's really going to help us in access because

99
00:05:46,420 --> 00:05:53,350
if we run this now you can see right here we have not found S2P exception which is helpful rather than

100
00:05:53,350 --> 00:05:56,710
saying that we failed to assert a 4 0 4 2 0 2.

101
00:05:56,820 --> 00:05:57,240
OK.

102
00:05:57,250 --> 00:06:02,640
So that's how we can actually talk exceptions and see them in our terminal when we are running our tests.

103
00:06:02,650 --> 00:06:03,110
OK.

104
00:06:03,160 --> 00:06:04,790
So this is completely novel.

105
00:06:04,930 --> 00:06:07,930
Don't convert this joint S2P page just yet.

106
00:06:07,960 --> 00:06:11,650
I want to use the exception so for it and that's a retweet.

107
00:06:11,800 --> 00:06:15,180
So how do we fix and not phone SATB exception.

108
00:06:15,250 --> 00:06:17,470
Very simple we just need to create a route.

109
00:06:17,560 --> 00:06:18,030
Right.

110
00:06:18,040 --> 00:06:22,540
So let's have the virtue of what that ph be and where we're going to create a Roths which is going to

111
00:06:22,540 --> 00:06:28,330
be a gets and it's going to go to the slosh about let's just passing closer right here.

112
00:06:28,330 --> 00:06:29,520
I'm gonna run this again.

113
00:06:29,530 --> 00:06:35,980
And now we have Phil asserting that an empty stream contains about me because disclosure doesn't return

114
00:06:36,010 --> 00:06:36,600
anything.

115
00:06:36,610 --> 00:06:38,640
Therefore it is an empty string.

116
00:06:38,740 --> 00:06:42,070
And then we are failing to answer that he contains about me.

117
00:06:42,070 --> 00:06:48,580
If we are receiving this error it means that we actually passed the first Test in our code by returning

118
00:06:48,670 --> 00:06:52,500
a status of 200 right because we are not returning anything.

119
00:06:52,620 --> 00:06:56,790
He just gets a 200 and then we are not seen about me on the pitch.

120
00:06:56,890 --> 00:07:03,960
Now remember this is an approach that shows return the string about me and see what we get.

121
00:07:03,970 --> 00:07:10,330
So we are trying as much as possible to fix this test and then when we fix the test if it passes we're

122
00:07:10,330 --> 00:07:11,850
going to try to refactor our courts.

123
00:07:11,890 --> 00:07:13,770
Actually the way we want it to behave.

124
00:07:13,870 --> 00:07:16,150
So we have written about me here.

125
00:07:16,180 --> 00:07:17,650
Let's run the test again.

126
00:07:17,980 --> 00:07:19,500
And now we are successful.

127
00:07:19,510 --> 00:07:19,980
Why.

128
00:07:19,990 --> 00:07:22,140
Because we have about me right here.

129
00:07:22,270 --> 00:07:28,480
But then let's have a of refresh and we have a what about me checks wider Outlander is seen.

130
00:07:28,480 --> 00:07:30,990
But wait I don't want to bug me as a string.

131
00:07:31,000 --> 00:07:34,930
I want a beautiful page with about me in the page and all of that.

132
00:07:34,930 --> 00:07:36,640
So how are we going to do this.

133
00:07:36,640 --> 00:07:39,320
This is what we call the refactoring step right.

134
00:07:39,430 --> 00:07:43,350
We want to actually make the courts will find a way we want it to work.

135
00:07:43,450 --> 00:07:45,670
So how about returning a view.

136
00:07:45,670 --> 00:07:51,900
So let's go ahead and return a view rather than returning a bobby and begin to return the about view.

137
00:07:51,940 --> 00:07:54,510
So what above you doesn't exist.

138
00:07:54,520 --> 00:08:00,790
But after every single refactor all the best way to do is actually run your test to know what is breaking

139
00:08:00,790 --> 00:08:01,760
and what you've done.

140
00:08:01,930 --> 00:08:07,300
So right here we have the view about not found and we can fix that error by simply heading over our

141
00:08:07,300 --> 00:08:12,030
resources tree view and then creating that new view.

142
00:08:12,050 --> 00:08:15,140
So I'm just going to call these about the blade.

143
00:08:15,250 --> 00:08:16,510
Now we have that view.

144
00:08:16,540 --> 00:08:21,730
Let's go ahead and run a test a game and then we have failed our search engine the MC machine contains

145
00:08:21,730 --> 00:08:22,210
about me.

146
00:08:22,210 --> 00:08:24,090
Obviously the views empty right.

147
00:08:24,100 --> 00:08:27,050
So if we had to watch our Basar it's empty.

148
00:08:27,130 --> 00:08:34,750
So what we're going to do is actually just write about me in the view and see if one ancestor game and

149
00:08:34,750 --> 00:08:37,400
we have a passing test again right.

150
00:08:37,600 --> 00:08:43,660
We return we refresh and then we you have about me which means a testis passing but then we don't still

151
00:08:43,690 --> 00:08:44,430
one this right.

152
00:08:44,430 --> 00:08:47,750
We want a view and we make sure that this test isn't it.

153
00:08:47,770 --> 00:08:53,950
So I'm just going to copy everything in my work on the blade to be pasted right there and I'm just going

154
00:08:53,950 --> 00:08:55,500
to remove all of these things.

155
00:08:55,540 --> 00:09:01,950
We don't need them and the for one at SEST right now we're going to fill to assert that all of this

156
00:09:01,950 --> 00:09:04,480
is Jimoh in the page contains about me.

157
00:09:04,480 --> 00:09:08,230
That's why we have the top field as such and that all of the demo contains about me.

158
00:09:08,230 --> 00:09:14,360
So somewhere somehow in our code court we have to Acourt about me for this test to pass.

159
00:09:14,410 --> 00:09:21,520
So let's go ahead and cole about me right here safe and let's run a test again and we have a test passing

160
00:09:21,610 --> 00:09:22,250
again.

161
00:09:22,480 --> 00:09:25,650
And let's refresh our browser and there we have it.

162
00:09:25,660 --> 00:09:27,180
We have about me now.

163
00:09:27,270 --> 00:09:34,610
It's been a long while to actually write this simple simple very basic amount of code right.

164
00:09:34,690 --> 00:09:42,460
So we have a lot of fires fires one a lot of test as such that a lot of stuff just because we want to

165
00:09:42,460 --> 00:09:46,960
Creedon about the blade the HP and put in something about me to extend it right.

166
00:09:47,050 --> 00:09:53,330
Yeah but then as I walked you through the simple steps that we need to take before buten a future obligation.

167
00:09:53,350 --> 00:09:59,910
Right and it's actually a lot helpful when you build the application in this way because let's say you

168
00:09:59,910 --> 00:10:05,000
want a ship to put action on a team mates things are not good enough.

169
00:10:05,100 --> 00:10:06,910
Let's change this to about us.

170
00:10:07,050 --> 00:10:13,850
So when you run your test again now it feels so before you push on you know it feels and you know why

171
00:10:13,890 --> 00:10:17,310
it feels now because it tells you that a body takes is not included.

172
00:10:17,310 --> 00:10:23,760
So you can either choose to now into this future your application by simply changing the test to make

173
00:10:23,760 --> 00:10:25,590
sure that it sees about us.

174
00:10:25,590 --> 00:10:31,440
And when you run it you have a successful test or you can tell the thing that we want to stick to about

175
00:10:31,440 --> 00:10:35,310
me so make sure that the test procedure is the same way it works.

176
00:10:35,340 --> 00:10:42,090
So that's a very very brief example of using students with a mentor to really accomplish stuff and not

177
00:10:42,090 --> 00:10:47,100
just sleep in day to day life we're going to have more complex stuff to take care of but this is going

178
00:10:47,100 --> 00:10:48,910
to give you a really good footing.

